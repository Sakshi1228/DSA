class Solution {
public:
    ListNode* getmid(ListNode* head)
    {
        ListNode* slow = head;
        ListNode* fast = head -> next;

        while(fast != NULL && fast -> next != NULL)
        {
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        return slow;
    }

    ListNode* reverse(ListNode* head)
    {
        ListNode* curr = head;
        ListNode* prev = NULL;
        ListNode* forward = NULL;

        while(curr != NULL)
        {
            forward = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;

    }

    bool isPalindrome(ListNode* head) {
        
        if(head == NULL || head -> next == NULL)
        {
            return true;
        }

        //step1
        ListNode* Middle = getmid(head);

        //step2
        ListNode* temp = Middle -> next;
        Middle -> next = reverse(temp);

        //step3
        ListNode* head1 = head;
        ListNode* head2 = Middle -> next;

        while(head2 != NULL)
        {
            if(head1 -> val != head2 -> val)
            {
                return false;
            }
            head1 = head1 -> next;
            head2 = head2 -> next;
        }

        return true;
        
    }
};
