class Solution {
public:
    int longestPalindromeSubseq(string s) {
        string a = s;
        reverse(a.begin(),a.end());
        int n = s.size();
        //space optimization
        vector<int> curr(n+1,0);
        vector<int> next(n+1,0);

        for(int i =1;i<n+1;i++)
        {
            for(int j=1;j<n+1;j++)
            {
                if(s[i-1] == a[j-1])
                {
                    curr[j] = 1+ next[j-1];
                }
                else
                {
                    curr[j] = max(next[j],curr[j-1]);
                }
            }
            next = curr;
        }

        return next[n];


        // vector<vector<int>> dp(n+1 , vector<int>(n+1, -1));

        // for(int i=0;i<n+1;i++)
        // {
        //     dp[0][i] = 0;
        // }
        // for(int i=0;i<n+1;i++)
        // {
        //     dp[i][0] = 0;
        // }

        // for(int i =1;i<n+1;i++)
        // {
        //     for(int j=1;j<n+1;j++)
        //     {
        //         if(s[i-1] == a[j-1])
        //         {
        //             dp[i][j] = 1+ dp[i-1][j-1];
        //         }
        //         else
        //         {
        //             dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
        //         }
        //     }
        // }

        // return dp[n][n];
    }
};
