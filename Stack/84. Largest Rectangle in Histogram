class Solution {
public:
    vector<int> Left(vector<int>& heights)
    {
        stack<pair<int,int>> s;
        vector<int> left;
        int N = heights.size();
        int pseudo = -1;

        for(int i=0;i<N;i++)
        {
            while(s.size() > 0 && s.top().first >= heights[i])
            {
                s.pop();
            }

            if(s.size() == 0)
            {
                left.push_back(pseudo);
            }
            else
            {
                left.push_back(s.top().second);
            }

            s.push({heights[i],i});
        }

        return left;
    }

    vector<int> Right(vector<int>& heights)
    {
        stack<pair<int,int>> s;
        vector<int> right;
        int N = heights.size();
        int pseudo = heights.size();

        for(int i=N-1;i>=0;i--)
        {
            while(s.size() > 0 && s.top().first >= heights[i])
            {
                s.pop();
            }

            if(s.size() == 0)
            {
                right.push_back(pseudo);
            }
            else
            {
                right.push_back(s.top().second);
            }

            s.push({heights[i],i});
        }

        reverse(right.begin(),right.end());

        return right;
    }

    int largestRectangleArea(vector<int>& heights) {

        vector<int> L = Left(heights);
        vector<int> R = Right(heights);

        int s = heights.size();

        int maxi= INT_MIN;
        int area[s],weight[s];

        for(int i =0 ;i<s;i++)
        {
            weight[i] = R[i] - L[i] - 1;
            area[i] = weight[i] * heights[i];
            maxi = max(area[i],maxi);
        }
        
        return maxi;
    }
};
